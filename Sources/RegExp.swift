
import Foundation

import POSIX

//
// Convenience wrapper around common regex functions
//

// API
//
// let re = try RegExp(pattern)
// re.replace("input string", template: "$1")
// re.test("input string") // true

// Linux:
//
// - NSRegularExpression is not implemented for Linux
// - The POSIXRegex wrapper library I'm using is too basic to
//   support any moderately complex expression I've tried, so
//   some functionality like ContentType.swift are just going
//   to be disabled until Linux gets support

open class RegExp {
#if os(Linux)
  let internalExpression: Regex
#else
  let internalExpression: NSRegularExpression
#endif

  let pattern: String

  // Initializer throws if pattern is invalid. You should
  // use `try!` unless the regex is dynamically generated by, say,
  // user-input.
  public init (_ pattern: String) throws {
    self.pattern = pattern
#if os(Linux)
    self.internalExpression = try Regex(pattern, options: .caseInsensitive)
#else
    self.internalExpression = try NSRegularExpression(pattern: pattern, options: .caseInsensitive)
#endif
  }

  // STRINGS

#if os(Linux)
  public func replace (_ input: String, template: String) -> String {
    return input.replace(self.internalExpression, with: template)
  }
#else
  // TODO: replace try! - just trying to get this module updated
  // to work with swift3/linux right now.
  open func replace (_ input: String, template: String) -> String {
    let re = try! Regex(self.internalExpression.pattern)
    return input.replace(re, with: template)
  }
#endif

  // MATCHES

#if os(Linux)
  public func test (_ input: String) -> Bool {
    return input.matches(self.internalExpression)
  }
#endif

#if os(OSX)
  // Simply check if regex matches a string at all
  open func test (_ input: String) -> Bool {
    return self.findFirst(input) != nil
  }

  // Note: The following are not public since there are too
  // many issues implementing them in Linux. So far the plan
  // is to just wait til Linux gets NSRegularExpression support.

  // Returns first match (not implemented in Linux)
  internal func findFirst (_ input: String, start: Int = 0) -> NSTextCheckingResult? {
    let range = NSMakeRange(start, input.characters.count - start)
    return self.internalExpression.firstMatch(in: input, options: [], range: range)
  }

  // Returns all matches
  internal func findAll (_ input: String, start: Int = 0) -> [NSTextCheckingResult] {
    let range = NSMakeRange(start, input.characters.count - start)
    return self.internalExpression.matches(in: input, options: [], range: range)
  }
#endif

  // UTILITY

  // Escapes special regex chars in string so that they become a literal search.
  //
  // escape("(a)") => "\(a\)"
  open static func escape (_ pattern: String) -> String {
    let list = "[-\\(\\)^$*+?.\\/\\\\|\\[\\]\\{\\}]"
    let escaped = try! RegExp("(\(list))").replace(pattern, template: "\\\\$1")
    return escaped
  }
}
